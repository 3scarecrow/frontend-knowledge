(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{374:function(t,e,a){t.exports=a.p+"assets/img/cache-match.8e096763.svg"},417:function(t,e,a){"use strict";a.r(e);var v=a(42),_=Object(v.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[t._v("#")]),t._v(" 缓存")]),t._v(" "),v("p",[t._v("HTTP 缓存是通过头部字段来控制的，包括"),v("strong",[t._v("强缓存")]),t._v("和"),v("strong",[t._v("协商缓存")])]),t._v(" "),v("h2",{attrs:{id:"强缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[t._v("#")]),t._v(" 强缓存")]),t._v(" "),v("h3",{attrs:{id:"expires"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[t._v("#")]),t._v(" Expires")]),t._v(" "),v("p",[v("strong",[t._v("Expires")]),t._v(" 是 HTTP/1.0 的规范，其值为一个绝对时间的 GMT 格式的时间字符串，比如: "),v("code",[t._v("Expires: Wed, 21 Oct 2020 07:28:00 GMT")]),t._v("。如果发送请求的时间超过 Expires 值，则响应过期。")]),t._v(" "),v("h3",{attrs:{id:"cache-control"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[t._v("#")]),t._v(" Cache-control")]),t._v(" "),v("p",[v("strong",[t._v("Cache-Control")]),t._v(" 是 HTTP/1.1 定义的，用来标记服务器资源有效期的，通过它提供不同的值来定义缓存策略")]),t._v(" "),v("h4",{attrs:{id:"过期"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#过期"}},[t._v("#")]),t._v(" 过期")]),t._v(" "),v("p",[t._v("当 Cache-Control 的值为 "),v("code",[t._v("max-age=<seconds>")]),t._v(' 时，表示资源能够被缓存的最大时间，max-age 是生存时间（也被称为 "新鲜度"）。相对于 Expires，max-age 时间的计算起点是响应报文的创建时刻（即 Date 字段）是一个相对时间。同时，max-age 也是 HTTP 缓存控制中最常用的属性值。例如 '),v("code",[t._v("Cache-Control: max-age=31536000")]),t._v("，表示过期时间为一年")]),t._v(" "),v("h4",{attrs:{id:"没有缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#没有缓存"}},[t._v("#")]),t._v(" 没有缓存")]),t._v(" "),v("p",[t._v("Cache-Control 设置为 "),v("code",[t._v("no-store")]),t._v(" 时，表示不允许缓存，即缓存中不得存储资源的响应")]),t._v(" "),v("h4",{attrs:{id:"缓存但重新验证"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#缓存但重新验证"}},[t._v("#")]),t._v(" 缓存但重新验证")]),t._v(" "),v("p",[t._v("Cache-Control 设置为 "),v("code",[t._v("no-cache")]),t._v(' 时，表示缓存会将此请求发到服务器并携带上与本地缓存相关的验证字段，例如 "'),v("strong",[t._v("If-Modified-Since")]),t._v('"，"'),v("strong",[t._v("If-None-Match")]),t._v('"，服务器会验证请求中所描述的缓存是否过期，如果未过期，则返回状态码 '),v("strong",[t._v("304")]),t._v("，表示可使用本地缓存文件。验证资源是否失效需要使用"),v("a",{attrs:{href:"#%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98"}},[t._v("协商缓存")])]),t._v(" "),v("h4",{attrs:{id:"私有与公共缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#私有与公共缓存"}},[t._v("#")]),t._v(" 私有与公共缓存")]),t._v(" "),v("p",[v("code",[t._v("public")]),t._v(" 表示该响应可以被任何中间人（代理服务器，CDN等）缓存。")]),t._v(" "),v("p",[t._v("而 "),v("code",[t._v("private")]),t._v(" （默认是 private）则表示该响应专用于单个用户的，中间人不能缓存此响应，该响应只能应用于浏览器私有缓存中。")]),t._v(" "),v("h4",{attrs:{id:"验证方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#验证方式"}},[t._v("#")]),t._v(" 验证方式")]),t._v(" "),v("p",[t._v("当设置为 "),v("code",[t._v("must-revalidate")]),t._v(" 时，表示如果缓存不过期就可以继续使用，但过期了如果还想使用的话需要去服务器验证。")]),t._v(" "),v("h2",{attrs:{id:"协商缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[t._v("#")]),t._v(" 协商缓存")]),t._v(" "),v("p",[t._v("如果本地缓存过期了，需要发送请求到服务器询问该资源是否新鲜，如果服务器验证资源是新鲜的，则返回 304 状态码，无需返回数据，可以节省带宽和减少响应时间；否则会带有该资源的实体内容返回。此过程称为"),v("strong",[t._v("新鲜度检测")]),t._v("，而实现这种缓存的方式就是"),v("strong",[t._v("协商缓存")]),t._v("。")]),t._v(" "),v("p",[t._v("协商缓存常用的头字段 “对儿” 有 "),v("code",[t._v("If-Modified-Since")]),t._v(" 和 "),v("code",[t._v("Last-Modified")]),t._v(" 以及 "),v("code",[t._v("If-None-Match")]),t._v(" 和 "),v("code",[t._v("ETag")]),t._v("。")]),t._v(" "),v("p",[t._v("服务器需要在第一次响应报文中预先提供 "),v("code",[t._v("Last-Modified")]),t._v(" 和 "),v("code",[t._v("ETag")]),t._v("，然后浏览器在第二次请求相同资源时就可以带上缓存里的 "),v("code",[t._v("If-Modified-Since")]),t._v("（值与 "),v("code",[t._v("Last-Modified")]),t._v(" 相同） 和 "),v("code",[t._v("If-None-Match")]),t._v("（值与 "),v("code",[t._v("ETag")]),t._v(" 相同），服务器验证资源是否是最新的。")]),t._v(" "),v("h3",{attrs:{id:"last-modified"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#last-modified"}},[t._v("#")]),t._v(" Last-Modified")]),t._v(" "),v("p",[t._v("Last-Modified 表示文件的最后修改时间")]),t._v(" "),v("p",[v("strong",[t._v("存在的问题")]),t._v(": 例如，一个文件在一秒内修改多次，由于修改时间是秒级的，所以这一秒内的新版本无法区分；再比如，一个文件定期更新，但有时内容实际上并没有变化，服务器就会判断资源为新鲜的，从而响应最新的资源。")]),t._v(" "),v("h3",{attrs:{id:"etag"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#etag"}},[t._v("#")]),t._v(" ETag")]),t._v(" "),v("p",[t._v('ETag 表示 "实体标签（Entity Tag）"，'),v("strong",[t._v("是资源的唯一标识")]),t._v("，主要用来解决修改时间无法准确区分文件变化的问题。")]),t._v(" "),v("p",[t._v("ETag 可以解决 Last-Modified 存在的问题，可以精确地识别资源的变动情况，让浏览器能够更有效地利用缓存。")]),t._v(" "),v("p",[t._v('ETag 有 "'),v("strong",[t._v("强")]),t._v('" 和 "'),v("strong",[t._v("弱")]),t._v('" 验证器')]),t._v(" "),v("p",[t._v('强 ETag 要求资源在字节级别必须完全符合，而弱 ETag 在值前有个 "W/" 标记，只要求资源在语义上没有变化，但内部可能有部分发生了变化')]),t._v(" "),v("h2",{attrs:{id:"验证缓存过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#验证缓存过程"}},[t._v("#")]),t._v(" 验证缓存过程")]),t._v(" "),v("p",[v("img",{attrs:{src:a(374),alt:"匹配缓存总过程"}})]),t._v(" "),v("p",[t._v("用户操作对缓存的影响")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"center"}},[t._v("用户操作")]),t._v(" "),v("th",{staticStyle:{"text-align":"center"}},[t._v("Cache-Control")]),t._v(" "),v("th",{staticStyle:{"text-align":"center"}},[t._v("Last-Modified/ETag")])])]),t._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("前进后退")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("有效")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("有效")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("页面链接跳转")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("有效")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("有效")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("地址栏回车")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("有效")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("有效")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("刷新")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("无效")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("有效")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("强制刷新")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("无效")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("无效")])])])]),t._v(" "),v("p",[t._v('"刷新" 时，请求头会携带 '),v("code",[t._v("Cache-Control: max-age=0")]),t._v("，表示不管响应头如何设置，需要向"),v("strong",[t._v("服务器验证资源新鲜度")]),t._v('（即验证 ETag/Last-Modified）。而 "强制刷新" 请求头携带 '),v("code",[t._v("Cache-Control:no-cache")]),t._v("，表示"),v("strong",[t._v("本地没有缓存数据")]),t._v("，需要服务器响应最新资源。")]),t._v(" "),v("p",[t._v('"刷新" 时，请求头会携带 '),v("code",[t._v("If-Modified-Since")]),t._v(" 或 "),v("code",[t._v("If-None-Match")]),t._v('，因此协商缓存是有效的。而 "强制刷新" 时，请求头则不会携带 '),v("code",[t._v("If-Modified-Since")]),t._v(" 或 "),v("code",[t._v("If-None-Match")]),t._v("，导致协商缓存不能命中，只能让服务器响应最新的资源。")]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),v("p",[t._v("html 外联的css/js 会缓存于 "),v("RouterLink",{attrs:{to:"/browser/browser-cache.html#内存缓存"}},[t._v("memory cache")]),t._v(" 中")],1)]),t._v(" "),v("h2",{attrs:{id:"改进资源缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#改进资源缓存"}},[t._v("#")]),t._v(" 改进资源缓存")]),t._v(" "),v("blockquote",[v("p",[t._v("我们使用缓存的资源越多，网站的响应能力和性能就会越好。为了优化缓存，过期时间设置得尽量长是一种很好的策略。对于定期或者频繁更新的资源，这么做是比较稳妥的，但是对于那些长期不更新的资源会有点问题。这些固定的资源在一定时间内受益于这种长期保持的缓存策略，但一旦要更新就会很困难。特指网页上引入的一些js/css文件，当它们变动时需要尽快更新线上资源。 -- MDN")])]),t._v(" "),v("p",[t._v("所以就出现了被 Steve Souders 称为 revving 的技术。即给不频繁更新的文件使用特定的命名方式: URL 后面加上版本号或 hash 或时间戳。只要 URL 不同，那么它们就被视为完全新的独立的资源，同时拥有一年甚至更长的缓存过期时长。而这些版本号或者 hash可由自动化构建工具完成即可，时间戳由 JavaScript 处理即可。")]),t._v(" "),v("h2",{attrs:{id:"参考文章"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP 缓存"),v("OutboundLink")],1)]),t._v(" "),v("li",[t._v("20 | 生鲜速递：HTTP的缓存控制")]),t._v(" "),v("li",[v("a",{attrs:{href:"https://segmentfault.com/a/1190000020086923",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP缓存和浏览器的本地存储"),v("OutboundLink")],1)]),t._v(" "),v("li",[v("a",{attrs:{href:"https://juejin.cn/post/6844904133024022536",target:"_blank",rel:"noopener noreferrer"}},[t._v("轻松理解浏览器缓存"),v("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=_.exports}}]);